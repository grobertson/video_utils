#!/usr/bin/env python3
#+
# Name:
#   MKV_Cron_Convert
# Purpose:
#   A python script to be run in a cron job to convert movie and TV Shows
#   in a given directory.
# Inputs:
#   None.
# Outputs:
#   Some converted movies
# Keywords:
#   None.
# Author and History:
#   Kyle R. Wodzicki
# Notes:
#   Built to run on OS X and Linux
#      Not tested on windows but might work?
#-
import os

#import sys
#sys.path = sys.path[1:];                                                        # Remove parent directory of this file from sys_path so that makemkv_to_mp4 imports correctly

from threading import Thread;

from video_utils.version import __version__
from video_utils.MKV_Cron_Convert import MKV_Cron_Convert;

##########################################
def convert(src, dst):
  dst = type(dst);
  if src == 'True':
    return True;
  elif src == 'False':
    return False;
  else:
    try:
      return int(src);
    except:
      pass;
  if dst is not bool:
    return dst( src );
  return src

##########################################
def userInterface( classToEdit ):
  '''
  A function that will allow users to interact with the cron job, if
  they can bring it to the forground.
  '''
  headFMT = '{:5}   {:^15}   {:^10}';                                           # Header format for table
  ans     = None;
  opts = ['threads', 'cpulimit', 'language', 'vobsub', 'srt', 'vobsub_delete'];
  def getOptions():
    vals = [];                                                                  # Initialize empty list
    print( headFMT.format('Option','Description','Current Value') );            # Print table header
    print( '-'*36 );                                                            # Print bar
    for i in range( len(opts) ):                                                # Iterate over options
      val = getattr(classToEdit, opts[i]);                                      # Get the value from the class
      if val is None: val = 'Disabled';                                         # If the value is None, set to None
      vals.append( val );                                                       # Append the value to the vals list
      print( '{:5d}   {:^15}   {}'.format(i, opts[i], vals[i]) );               # Print out the option number, description, and current value
    return vals;                                                                # Return current values

  print( 'Current options for conversions:' );
  vals = getOptions();
  while ans != "STOP":                                                          # While ans is NOT equal to STOP
    ans = input("Type 'STOP' to halt program or 'options' to change options: ");# Prompt for something to do
    if ans == "STOP":                                                           # If ans is STOP
      print('Program will stop after current transcode is finished');           # Inform user that program will stop
      classToEdit.halt = True;                                                  # Set halt to True
    elif ans == "options":                                                      # Else, if options is entered
      os.system('cls||clear');                                                  # Clear the terminal screen
      print( 'Select option to change' );                                       # Print information
      vals = getOptions();                                                      # Get the options
      ans = input( 'Option: ' );                                                # Prompt user for option to adjust
      if ans == '': continue;                                                   # If nothing entered, just continue while loop
      try:
        opt = int( ans );                                                       # Convert input to an integer
      except:
        continue;
      if opt >= 0 and opt < len(opts):                                          # If the integer is in the correct range
        if vals[opt] is None:                                                   # If the value is None
          print('Options is disabled, CANNOT change!!!');                       # Option is disabled and cannot be changed
          continue;                                                             # Continue
        if opts[opt] == 'language':                                             # If user changing language
          prompt = 'Enter comma separated values for {} (current value {}): ';  # Message for new language(s) prompt
        else:                                                                   # Else
          prompt = 'Enter new value for {} (current value {}): ';               # Message for new value prompt
        new    = input( prompt.format(opts[opt], vals[opt]) );                  # Prompt for new value
        if new == '': continue;                                                 # If nothing is entered, just continue while loop
        prompt = 'Are you sure you want to set {} to {} (y/n): ';               # Message fro conformation prompt
        conf   = input( prompt.format( opts[opt], new ) );                      # Prompt for confirmation
        if conf == 'y':                                                         # If y is entered, then adjust value
          if opts[opt] == 'language': new = new.split(',');                     # If on language, split on comma
          setattr( classToEdit, opts[opt], convert(new, vals[opt]) );           # Adjust the value
          os.system('cls||clear');                                              # Clear the terminal screen
          print( 'New values for options' );                                    # Print information
          vals = getOptions();                                                  # Print table again to show new value

################################################################################
# Set up command line arguments for the function
if __name__ == "__main__":
  import argparse;                                                              # Import library for parsing
  parser = argparse.ArgumentParser(description="MKV Cron Converter");           # Set the description of the script to be printed in the help doc, i.e., ./script -h
  parser.add_argument("indir",                 type   = str, nargs='+', help = "Input directory(s) where all files to be converted are found"); 
  parser.add_argument("-o", "--outdir",        type   = str,            help = "Output directory for transcoded files. Default: Same as input"); 
  parser.add_argument("-l", "--logdir",        type   = str,            help = "Log file directory. Default: Same as input file"); 
  parser.add_argument("-t", "--threads",       type   = int,            help = "Set number of threads to use. Default: Half the number of threads available");  
  parser.add_argument("-c", "--cpulimit",      type   = int,            help = "Set to limit CPU usage. Set to 0 to disable CPU limiting. Default is 75 percent per thread.");
  parser.add_argument("--language",            type   = str,            help = "Set audio and subtitle language(s) using three (3) character codes (ISO 639-2). For multiple langauges, seperate using commas. Default: eng for English");
  parser.add_argument("-v", "--verbose",       action = "store_true",   help = "Increase verbosity");
  parser.add_argument("-r", "--remove",        action = "store_true",   help = "Set to remove input file after transcode");
  parser.add_argument("-V", "--vobsub",        action = "store_true",   help = "Set to extract VobSub(s)");
  parser.add_argument("-s", "--srt",           action = "store_true",   help = "Set to convert VobSub(s) to SRT");
  parser.add_argument("-d", "--delete-vobsub", action = "store_true",   help = "Set to delete VobSub(s). Usually used with the --srt option.");
  parser.add_argument('--version',             action = 'version', version = '%(prog)s '+__version__)
  
  args = parser.parse_args();                                                   # Parse the arguments
  inst = MKV_Cron_Convert( args.indir, 
    out_dir       = args.outdir,
    log_dir       = args.logdir,
    threads       = args.threads,
    cpulimit      = args.cpulimit,
    language      = args.language,
    verbose       = args.verbose,
    remove        = args.remove,
    vobsub        = args.vobsub,
    srt           = args.srt,
    vobsub_delete = args.delete_vobsub ); 

  threadMain  = Thread( target = inst.run );                                    # Initialize a thread that will run the MKV_Cron_Convert instance
  threadInput = Thread( target = userInterface, args = (inst, ), daemon=True ); # Initialize a thread that will allow user to halt transcode through input

  threadMain.start();                                                           # Start the transcode thread
  threadInput.start();                                                          # Start the input thread
  threadMain.join();                                                            # Join the transcode thread, i.e., wait for it to finish
  if not inst.halt: print( "" );                                                # Print empty string if halt is False
  
  exit( inst.status );  
