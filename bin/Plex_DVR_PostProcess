#!/usr/bin/env python3
import argparse;
import os, time;

from video_utils.config import plex_dvr;
from video_utils.Plex_DVR_PostProcess import Plex_DVR_PostProcess;
from video_utils.utils.plex_utils import plexDVR_Scan;
from video_utils.utils.spawnDaemon import spawnDaemon;

'''
Note for file removing;
We do NOT want to remove the file after transcoding as the child 
process that runs on a delay will take care of this flag; the 
input file should remain so that Plex can move things and not
get mad.
'''

if __name__ == "__main__":
  parser = argparse.ArgumentParser(description="Plex DVR Post Processor");           # Set the description of the script to be printed in the help doc, i.e., ./script -h
  parser.add_argument("in_file",               type   = str,          help = "Input file to process"); 
  parser.add_argument("-l", "--logdir",        type   = str,          help = "Log file directory. Default: Same as input file"); 
  parser.add_argument("-t", "--threads",       type   = int,          help = "Set number of CPUs to use. Default: Half the number of CPUs available");  
  parser.add_argument("-c", "--cpulimit",      type   = int,          help = "Set to limit CPU usage. Set to 0 to disable CPU limiting. Default is 75 percent per thread.");
  parser.add_argument("--language",            type   = str,          help = "Set audio and subtitle language(s) using three (3) character codes (ISO 639-2). For multiple langauges, seperate using commas. Default: eng for English");
  parser.add_argument("-v", "--verbose",       action = "store_true", help = "Increase verbosity");
  parser.add_argument("--no-remove",           action = "store_true", help = "Set to remove input file after transcode");
  parser.add_argument("--no-srt",              action = "store_true", help = "Set to convert VobSub(s) to SRT");
  args = parser.parse_args();                                                   # Parse the arguments

  while os.path.isfile( plex_dvr['lock_file'] ): time.sleep(1.0);               # While the lock file exists, sleep for 1 second
  open(plex_dvr['lock_file'], 'w').close();                                     # Create the new lock file so other processes have to wait
  try:
    status, info = Plex_DVR_PostProcess(args.in_file, 
        logdir    = args.logdir, 
        threads   = args.threads, 
        cpulimit  = args.cpulimit,
        language  = args.language,
        verbose   = args.verbose,
        no_remove = True,
        no_srt    = args.no_srt);
  except:
    status = 255

  if os.path.isfile( plex_dvr['lock_file'] ): 
    os.remove( plex_dvr['lock_file'] )

  if status == 0:
    spawnDaemon( plexDVR_Scan, args.in_file, info, no_remove = args.no_remove );
  exit( status );  