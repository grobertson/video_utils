#!/usr/bin/env python3
import logging;
import argparse;
import os, time;

from video_utils.version import __version__;
from video_utils.config import plex_dvr;
from video_utils.Plex_DVR_PostProcess import Plex_DVR_PostProcess;
# from video_utils.utils.plex_utils import plexDVR_Cleanup;
from video_utils.utils.plex_utils import plexDVR_Scan;
# from video_utils.utils.spawnDaemon import spawnDaemon;

'''
Note for file removing;
We do NOT want to remove the file after transcoding as the child 
process that runs on a delay will take care of this flag; the 
input file should remain so that Plex can move things and not
get mad.
'''

if __name__ == "__main__":
  log    = logging.getLogger('video_utils');
  parser = argparse.ArgumentParser(description="Plex DVR Post Processor");           # Set the description of the script to be printed in the help doc, i.e., ./script -h
  parser.add_argument("in_file",               type   = str,          help = "Input file to process"); 
  parser.add_argument("-l", "--logdir",        type   = str,          help = "Log file directory. Default: Same as input file"); 
  parser.add_argument("-t", "--threads",       type   = int,          help = "Set number of CPUs to use. Default: Half the number of CPUs available");  
  parser.add_argument("-c", "--cpulimit",      type   = int,          help = "Set to limit CPU usage. Set to 0 to disable CPU limiting. Default is 75 percent per thread.");
  parser.add_argument("--language",            type   = str,          help = "Set audio and subtitle language(s) using three (3) character codes (ISO 639-2). For multiple langauges, seperate using commas. Default: eng for English");
  parser.add_argument("-v", "--verbose",       action = "store_true", help = "Increase verbosity");
  parser.add_argument("--no-remove",           action = "store_true", help = "Set to remove input file after transcode");
  parser.add_argument("--no-srt",              action = "store_true", help = "Set to convert VobSub(s) to SRT");
  parser.add_argument('--version',             action = 'version', version = '%(prog)s '+__version__)
  args = parser.parse_args();                                                   # Parse the arguments

  while os.path.isfile( plex_dvr['lock_file'] ): time.sleep(1.0);               # While the lock file exists, sleep for 1 second
  open(plex_dvr['lock_file'], 'w').close();                                     # Create the new lock file so other processes have to wait
  try:
    status, new_file, info = Plex_DVR_PostProcess(args.in_file, 
        logdir    = args.logdir, 
        threads   = args.threads, 
        cpulimit  = args.cpulimit,
        language  = args.language,
        verbose   = args.verbose,
        no_remove = args.no_remove,
        no_srt    = args.no_srt);
  except:
    log.exception('Something went wrong!')
    status = 255

  if (status == 0) and (not args.no_remove):                                    # If the status is zero (0) AND no_remove flag NOT set
    '''
    Here we are going to create a completely separate process using the
    so-called 'double-fork' method, where we create a child using fork,
    then create a child from that child; both parents are exited. When
    we are in the fully new process, we will run a utility that tries to
    update Plex so that the new, transcoded file is recognized as a second
    version of the original recording. The original file will then be removed
    and Plex re-updated to realized the original is gone. Any code after this
    if block will only run in the remaining child as all other processes are
    exited within this block
    '''
    try:                                                                        # Try to
      pid = os.fork();                                                          # Fork the process
    except OSError as e:                                                        # If error occured
      log.error( 'First fork failed: {} ({})'.format(e.errno, e.strerror) )
      exit(0);                                                                  # Exit with code zero (0) so Plex doesn't have a fit
    else:                                                                       # Else
      if pid > 0:                                                               # If process is the parent
        exit(0);                                                                # Exit with code zero (0); Plex will think we are done, but we aren't!

    os.setsid();                                                                # decouple from parent environment

    try:                                                                        # Try to
      pid = os.fork();                                                          # Fork the process
    except OSError as e:                                                        # If error occured
      log.error( 'Second fork failed: {} ({})'.format(e.errno, e.strerror) )
      exit(1);                                                                  # Exit with code one (1), Plex doesn't care at this point
    else:                                                                       # Else
      if pid > 0:                                                               # If process is the parent
        exit(0);                                                                # Exit with code zero (0); we only want the fully decoupled process
    
    try:
      plexDVR_Scan( args.in_file, new_file, info );                             # Run plexDVR_Scan function
    except:
      log.exception( 'Somthing went wrong when updating Plex' )

  if os.path.isfile( plex_dvr['lock_file'] ):                                   # If the log file exists
    os.remove( plex_dvr['lock_file'] );                                         # Remove it

  exit( status );  