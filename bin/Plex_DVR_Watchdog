#!/usr/bin/env python3
import logging;
from logging.handlers import RotatingFileHandler
import sys, os, time;
import argparse;

'''
The following code 'attempts' to add what should be the 
site-packages location where video_utils is installed
to sys.path
'''

binDir  = os.path.dirname( os.path.realpath( __file__ ) )
topDir  = os.path.dirname( binDir )
pyVers  = 'python{}.{}'.format(sys.version_info.major, sys.version_info.minor)
siteDir = ['lib', pyVers, 'site-packages']
siteDir = os.path.join( topDir, *siteDir )

if os.path.isdir(siteDir):
  if (siteDir not in sys.path):
    sys.path.append( siteDir )

from video_utils import log
from video_utils._logging import plexFMT
from video_utils.version import __version__
from video_utils.config import plex_dvr
from video_utils.plex.library_watchdog import library_watchdog
from video_utils.plex.utils import plexDVR_Scan

'''
Note for file removing;
We do NOT want to remove the file after transcoding as the child 
process that runs on a delay will take care of this flag; the 
input file should remain so that Plex can move things and not
get mad.
'''

def _initLogFile( logLevel ):
  noHandler = True;                                                             # Initialize noHandle
  for handler in log.handlers:                                                  # Iterate over all ha
    if handler.get_name() == plexFMT['name']:                                   # If handler name mat
      noHandler = False;                                                        # Set no handler fals
      break;                                                                    # Break for loop

  if noHandler:
    logDir = os.path.dirname( plexFMT['file'] );
    if not os.path.isdir( logDir ):
      os.makedirs( logDir )
    rfh = RotatingFileHandler(plexFMT['file'],
            backupCount = plexFMT['backupCount'],
            maxBytes    = plexFMT['maxBytes']);                                 # Set up rotating fil
    rfh.setFormatter( plexFMT['formatter'] );
    rfh.setLevel(     logLevel     );                                   # Set the logging lev
    rfh.set_name(     plexFMT['name']      );                                   # Set the log name
    log.addHandler( rfh );                                                      # Add hander to the m

    info = os.stat( plexFMT['file'] );                                          # Get information abo
    if (info.st_mode & plexFMT['permissions']) != plexFMT['permissions']:       # If the permissions
      try:                                                                      # Try to
        os.chmod( plexFMT['file'], plexFMT['permissions'] );                    # Set the permissions
      except:
        log.info('Failed to change log permissions; this may cause issues')

if __name__ == "__main__":

  parser = argparse.ArgumentParser(description="Plex DVR Watchdog");           # Set the description of the script to be printed in the help doc, i.e., ./script -h
  parser.add_argument("dir",                   type   = str, nargs='+',    help = "Plex library directory(s) to watch for DVR recordings"); 
  parser.add_argument("-t", "--threads",       type   = int,               help = "Set number of CPUs to use. Default: Half the number of CPUs available");  
  parser.add_argument("-c", "--cpulimit",      type   = int,               help = "Set to limit CPU usage. Set to 0 to disable CPU limiting. Default is 75 percent per thread.");
  parser.add_argument("--script",              type   = str,               help = "Set full path of Plex DVR Post-processing script to run. Use this if you already have a script that you would like to run instead of using the utilities included in this distribution.")
  parser.add_argument("--language",            type   = str,               help = "Set audio and subtitle language(s) using three (3) character codes (ISO 639-2). For multiple langauges, seperate using commas. Default: eng for English");
  parser.add_argument("-v", "--verbose",       type   = str, default=plexFMT['level'], help = "Increase verbosity");
  parser.add_argument("--destructive",         action = "store_true",      help = "Set to cut commercials out of file. Default is to leave commercials in file and add chapters for show segments and commercials. This is safer.");
  parser.add_argument("--no-remove",           action = "store_true",      help = "Set to disbale removing input file after transcode. Default is to delete soruce file.");
  parser.add_argument("--no-srt",              action = "store_true",      help = "Set to disbale conversion of VobSub(s) to SRT");
  parser.add_argument('--version',             action = 'version', version = '%(prog)s '+__version__)
  args = parser.parse_args();                                                   # Parse the arguments
  
  _initLogFile( args.verbose )

  try:
    wd = library_watchdog(*args.dir, 
        threads     = args.threads, 
        cpulimit    = args.cpulimit,
        script      = args.script,
        language    = args.language,
        verbose     = args.verbose,
        destructive = args.destructive,
        no_remove   = args.no_remove,
        no_srt      = args.no_srt);
  except:
    log.exception('Something went wrong! Watchdog failed to start')
    status = 255
  else:
    wd.join()

